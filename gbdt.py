# -*- coding: utf-8 -*-
"""GBDT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BNu7OuC2d4h46j01t72hgWE9G4NCrVEp
"""

!pip install fuzzy_c_means

!pip install scipy

!pip install -U scikit-learn

import pandas as pd
import numpy as np
import sklearn as sk
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import make_classification
from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import GradientBoostingClassifier
from fcmeans import FCM
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_curve, auc
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error , precision_score,accuracy_score,f1_score,recall_score
from six import StringIO
from IPython.display import Image
from sklearn.tree import export_graphviz
import pydotplus

# load your data
data = pd.read_csv("heart.csv")
data.head(8)

# Preprocess the data
data.replace('?',-99999, inplace=True)
print(data.axes)

data.isnull().sum()

# Let explore the dataset and do a few visualizations
print(data.loc[10])

data['target'].unique()

# Plot histograms for each variable
data.hist(figsize = (10, 10))
plt.show()

# Describe the dataset
print(data.describe())
print(data.info())

#plt.figure(figsize=(100,81))
#sns.pairplot(data,palette="Set2",kind='hist')
plt.figure(figsize=(13,13))
sns.heatmap(data.corr(),annot=True)

X = data.drop("target", axis=1)
y = data["target"]

# split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)

sc = StandardScaler()
sc.fit(X_train)
X_train_std = sc.transform(X_train)
X_test_std = sc.transform(X_test)

#Decision Tree Classifier
DT_model = DecisionTreeClassifier(max_depth=3)
DT_model.fit(X_train_std,y_train)

regressor = GradientBoostingClassifier(
    max_depth=3,
    n_estimators=3,
    learning_rate=1.0
)
regressor.fit(X_train, y_train)

errors = [mean_squared_error(y_test,y_pred) for y_pred in regressor.staged_predict(X_test)]
best_n_estimators = np.argmin(errors)

GBDT_best_regressor = GradientBoostingClassifier(
    max_depth =3 ,
    n_estimators=best_n_estimators,
    learning_rate = 1.0
)
GBDT_best_regressor.fit(X_train,y_train)

# Bagging
gbdt = GradientBoostingClassifier()
Bag_GBDT = BaggingClassifier(base_estimator=gbdt, n_estimators=5, max_samples=0.8)
Bag_GBDT.fit(X_train, y_train)

df_tk=data
def lower_limit(data):
  col = data.columns
  data_lower_limit = []
  for i in col:
    df = data[i]
    x = (1*df[0] + 1*df[1] + 2*df[2] + 3*df[3] + 4*df[4]) / sum(df)
    data_lower_limit.append(x)
  return(data_lower_limit)

def middle_value(data):
  col = data.columns
  data_middle_value = []
  for i in col:
    df = data[i]
    x = (1*df[0] + 2*df[1] + 3*df[2] + 4*df[3] + 5*df[4]) / sum(df)
    data_middle_value.append(x)
  return(data_middle_value)

def upper_limit(data):
  col = data.columns
  data_upper_limit = []
  for i in col:
    df = data[i]
    x = (2*df[0] + 3*df[1] + 4*df[2] + 5*df[3] + 5*df[4]) / sum(df)
    data_upper_limit.append(x)
  return(data_upper_limit)

def fuzzi_work(data):
  clower_limit = lower_limit(data)
  dmiddle_value = middle_value(data)
  eupper_limit = upper_limit(data)
  df = pd.DataFrame(list(zip(clower_limit, dmiddle_value, eupper_limit)),columns =['batas bawah', 'nilai tengah', 'batas atas'])
  return(df)

fuzz_tk = fuzzi_work(df_tk)

regressor = GradientBoostingClassifier(
    max_depth=2,
    n_estimators=3,
    learning_rate=1.0
)
regressor.fit(X_train, y_train)

errors = [mean_squared_error(y_test,y_pred) for y_pred in regressor.staged_predict(X_test)]
best_n_estimators = np.argmin(errors)

Fuzzy_best_regressor = GradientBoostingClassifier(
    max_depth =2 ,
    n_estimators=best_n_estimators,
    learning_rate = 0.5
)
Fuzzy_best_regressor.fit(X_train,y_train)

regressor = GradientBoostingClassifier(
    max_depth=5,
    n_estimators=2,
    learning_rate=1.0
)
regressor.fit(X_train, y_train)

errors = [mean_squared_error(y_test,y_pred) for y_pred in regressor.staged_predict(X_test)]
best_n_estimators = np.argmin(errors)

best_regressor = GradientBoostingClassifier(
    max_depth =5,
    n_estimators=best_n_estimators,
    learning_rate = 1.0
)
best_regressor.fit(X_train,y_train)

Bag_Fuzzy_GBDT = BaggingClassifier(
    base_estimator= best_regressor,
    n_estimators=100,
    max_samples = 0.8,
    bootstrap=True,
    oob_score = True,
    random_state = 0
)
Bag_Fuzzy_GBDT.fit(X_train,y_train)

#Fuzzy-C-Means Clustering
fcm = FCM(n_clusters=8)
fcm.fit(X_train_std)
FX_train = fcm.predict(X_train_std)
FX_test = fcm.predict(X_test_std)
FX_train= FX_train.reshape(-1, 1)
FX_test = FX_test.reshape(-1, 1)

# Bagging
gbdt = GradientBoostingClassifier()
bag_fcm_gbdt = BaggingClassifier(base_estimator=gbdt, n_estimators=10, max_samples=0.8)
bag_fcm_gbdt.fit(FX_train, y_train)

# Predict
DT_y_pred = DT_model.predict(X_test_std)
print(DT_y_pred)

GBDT_y_pred = GBDT_best_regressor.predict(X_test)
print(GBDT_y_pred)

# Predict
Bag_GBDT_y_pred = Bag_GBDT.predict(X_test)
print(Bag_GBDT_y_pred)

Fuzzy_GBDT_y_pred = Fuzzy_best_regressor.predict(X_test)
print(Fuzzy_GBDT_y_pred)

Bag_Fuzzy_GBDT_y_pred = Bag_Fuzzy_GBDT.predict(X_test)
print(Bag_Fuzzy_GBDT_y_pred)

# Predict
bag_fcm_gbdt_y_pred = bag_fcm_gbdt.predict(FX_test)
print(bag_fcm_gbdt_y_pred)

i = 0
print ("\n-------------------------------------------------------------------------")
print ('%-25s %-25s %-25s' % ('Original Label', 'Predicted Label', 'Correct/Wrong'))
print ("-------------------------------------------------------------------------")
for label in y_test:
    print ('%-25s %-25s' % (label, bag_fcm_gbdt_y_pred[i]), end="")
    if (label == bag_fcm_gbdt_y_pred[i]):
        print (' %-25s' % ('Correct'))
    else:
        print (' %-25s' % ('Wrong'))
    i = i + 1
print ("-------------------------------------------------------------------------")
print("\nConfusion Matrix:\n",metrics.confusion_matrix(y_test, bag_fcm_gbdt_y_pred))
print ("-------------------------------------------------------------------------")
print("\nClassification Report:\n",metrics.classification_report(y_test, bag_fcm_gbdt_y_pred))
print ("-------------------------------------------------------------------------")
print('Accuracy of the classifer is %0.2f' % metrics.accuracy_score(y_test, bag_fcm_gbdt_y_pred))
print ("-------------------------------------------------------------------------")

i = 0
print ("\n-------------------------------------------------------------------------")
print ('%-25s %-25s %-25s' % ('Original Label', 'Predicted Label', 'Correct/Wrong'))
print ("-------------------------------------------------------------------------")
for label in y_test:
    print ('%-25s %-25s' % (label, DT_y_pred[i]), end="")
    if (label == DT_y_pred[i]):
        print (' %-25s' % ('Correct'))
    else:
        print (' %-25s' % ('Wrong'))
    i = i + 1
print ("-------------------------------------------------------------------------")
print("\nConfusion Matrix:\n",metrics.confusion_matrix(y_test, DT_y_pred))
print ("-------------------------------------------------------------------------")
print("\nClassification Report:\n",metrics.classification_report(y_test, DT_y_pred))
print ("-------------------------------------------------------------------------")
print('Accuracy of the classifer is %0.2f' % metrics.accuracy_score(y_test,DT_y_pred))
print ("-------------------------------------------------------------------------")

i = 0
print ("\n-------------------------------------------------------------------------")
print ('%-25s %-25s %-25s' % ('Original Label', 'Predicted Label', 'Correct/Wrong'))
print ("-------------------------------------------------------------------------")
for label in y_test:
    print ('%-25s %-25s' % (label, GBDT_y_pred[i]), end="")
    if (label == GBDT_y_pred[i]):
        print (' %-25s' % ('Correct'))
    else:
        print (' %-25s' % ('Wrong'))
    i = i + 1
print ("-------------------------------------------------------------------------")
print("\nConfusion Matrix:\n",metrics.confusion_matrix(y_test, GBDT_y_pred))
print ("-------------------------------------------------------------------------")
print("\nClassification Report:\n",metrics.classification_report(y_test, GBDT_y_pred))
print ("-------------------------------------------------------------------------")
print('Accuracy of the classifer is %0.2f' % metrics.accuracy_score(y_test, GBDT_y_pred))
print ("-------------------------------------------------------------------------")

i = 0
print ("\n-------------------------------------------------------------------------")
print ('%-25s %-25s %-25s' % ('Original Label', 'Predicted Label', 'Correct/Wrong'))
print ("-------------------------------------------------------------------------")
for label in y_test:
    print ('%-25s %-25s' % (label, Bag_GBDT_y_pred[i]), end="")
    if (label == Bag_GBDT_y_pred[i]):
        print (' %-25s' % ('Correct'))
    else:
        print (' %-25s' % ('Wrong'))
    i = i + 1
print ("-------------------------------------------------------------------------")
print("\nConfusion Matrix:\n",metrics.confusion_matrix(y_test, Bag_GBDT_y_pred))
print ("-------------------------------------------------------------------------")
print("\nClassification Report:\n",metrics.classification_report(y_test, Bag_GBDT_y_pred))
print ("-------------------------------------------------------------------------")
print('Accuracy of the classifer is %0.2f' % metrics.accuracy_score(y_test, Bag_GBDT_y_pred))
print ("-------------------------------------------------------------------------")

i = 0
print ("\n-------------------------------------------------------------------------")
print ('%-25s %-25s %-25s' % ('Original Label', 'Predicted Label', 'Correct/Wrong'))
print ("-------------------------------------------------------------------------")
for label in y_test:
    print ('%-25s %-25s' % (label, Fuzzy_GBDT_y_pred[i]), end="")
    if (label == Fuzzy_GBDT_y_pred[i]):
        print (' %-25s' % ('Correct'))
    else:
        print (' %-25s' % ('Wrong'))
    i = i + 1
print ("-------------------------------------------------------------------------")
print("\nConfusion Matrix:\n",metrics.confusion_matrix(y_test, Fuzzy_GBDT_y_pred))
print ("-------------------------------------------------------------------------")
print("\nClassification Report:\n",metrics.classification_report(y_test, Fuzzy_GBDT_y_pred))
print ("-------------------------------------------------------------------------")
print('Accuracy of the classifer is %0.2f' % metrics.accuracy_score(y_test, Fuzzy_GBDT_y_pred))
print ("-------------------------------------------------------------------------")

i = 0
print ("\n-------------------------------------------------------------------------")
print ('%-25s %-25s %-25s' % ('Original Label', 'Predicted Label', 'Correct/Wrong'))
print ("-------------------------------------------------------------------------")
for label in y_test:
    print ('%-25s %-25s' % (label, Bag_Fuzzy_GBDT_y_pred[i]), end="")
    if (label == Bag_Fuzzy_GBDT_y_pred[i]):
        print (' %-25s' % ('Correct'))
    else:
        print (' %-25s' % ('Wrong'))
    i = i + 1
print ("-------------------------------------------------------------------------")
print("\nConfusion Matrix:\n",metrics.confusion_matrix(y_test, Bag_Fuzzy_GBDT_y_pred))
print ("-------------------------------------------------------------------------")
print("\nClassification Report:\n",metrics.classification_report(y_test, Bag_Fuzzy_GBDT_y_pred))
print ("-------------------------------------------------------------------------")
print('Accuracy of the classifer is %0.2f' % metrics.accuracy_score(y_test,Bag_Fuzzy_GBDT_y_pred))
print ("-------------------------------------------------------------------------")

# Calculate the bias error
DT_bias_error = 1 - accuracy_score(y_test, DT_y_pred)

# Calculate the variance error
DT_y_pred_train = DT_model.predict(X_train)
DT_variance_error = accuracy_score(y_train, DT_y_pred_train) - accuracy_score(y_test, DT_y_pred)

print("Bias error: ", DT_bias_error)
print("Variance error: ", DT_variance_error)

# Calculate the bias error
GBDT_bias_error = 1 - accuracy_score(y_test, GBDT_y_pred)

# Calculate the variance error
GBDT_y_pred_train = GBDT_best_regressor.predict(X_train)
GBDT_variance_error = accuracy_score(y_train, GBDT_y_pred_train) - accuracy_score(y_test, GBDT_y_pred)

print("Bias error: ", GBDT_bias_error)
print("Variance error: ", GBDT_variance_error)

# Calculate the bias error
Bag_GBDT_bias_error = 1 - accuracy_score(y_test, Bag_GBDT_y_pred)

# Calculate the variance error
Bag_GBDT_y_pred_train = Bag_GBDT.predict(X_train)
Bag_GBDT_variance_error = accuracy_score(y_train, Bag_GBDT_y_pred_train) - accuracy_score(y_test, Bag_GBDT_y_pred)

print("Bias error: ", Bag_GBDT_bias_error)
print("Variance error: ", Bag_GBDT_variance_error)

# Calculate the bias error
Fuzzy_GBDT_bias_error = 1 - accuracy_score(y_test, Fuzzy_GBDT_y_pred)

# Calculate the variance error
Fuzzy_GBDT_y_pred_train = Fuzzy_best_regressor.predict(X_train)
Fuzzy_GBDT_variance_error = accuracy_score(y_train, DT_y_pred_train) - accuracy_score(y_test, Fuzzy_GBDT_y_pred)

print("Bias error: ", Fuzzy_GBDT_bias_error)
print("Variance error: ", Fuzzy_GBDT_variance_error)

# Calculate the bias error
Bag_Fuzzy_GBDT_bias_error = 1 - accuracy_score(y_test, Bag_Fuzzy_GBDT_y_pred)

# Calculate the variance error
Bag_Fuzzy_GBDT_y_pred_train = Bag_Fuzzy_GBDT.predict(X_train)
Bag_Fuzzy_GBDT_variance_error = accuracy_score(y_train, Bag_Fuzzy_GBDT_y_pred_train) - accuracy_score(y_test, Bag_Fuzzy_GBDT_y_pred)

print("Bias error: ", Bag_Fuzzy_GBDT_bias_error)
print("Variance error: ", Bag_Fuzzy_GBDT_variance_error)